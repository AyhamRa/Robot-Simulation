#BlueJ class context
comment0.target=PlayingField
comment0.text=\r\n\ \ In\ this\ class,\ the\ playing\ Field\ will\ be\ created\ on\ which\ the\ robot\ will\ later\ move.\r\n
comment1.params=
comment1.target=PlayingField()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Spielfeld\r\n\ @leinwand,\ a\ Change\ requierd\ because\ it's\ now\ a\ Singleton\ Pattern,\ so\ we\ need\ to\ use\ The\ Methode\ "Leinwand.getinstnas()".\r\n
comment10.params=obstacles
comment10.target=void\ avoidObstacles(java.util.ArrayList)
comment10.text=\r\n\ The\ Robot\ will\ move\ and\ a\ void\ the\ Obstcals\ until\ he\ arrive\ the\ one\ or\ both\ Edges\ or\ stick\ between\ 2\ Obstacles.\r\n\ The\ Robot\ need\ not\ to\ search\ another\ way\ to\ go\ down\r\n\ Positive\ x\ values\ extend\ to\ the\ right,\ positive\ y\ values\ to\ the\ bottom\r\n
comment11.params=points
comment11.target=void\ driveAroundPoints(Point[])
comment11.text=\r\n\ The\ Robot\ will\ drive\ to\ the\ nearest\ Point\r\n
comment2.params=
comment2.target=Point[]\ EnterPoints()
comment2.text=\r\n\ This\ Method\ give\ The\ user\ the\ possibility\ to\ input\ numbers\ of\ Points\ and\ the\ Dimensionen\ (x,y).\r\n\ @Continue\:\ The\ continue\ statement\ breaks\ one\ iteration\ (in\ the\ loop),\ if\ a\ specified\ condition\ occurs,\r\n\ and\ continues\ with\ the\ next\ iteration\ in\ the\ loop.\r\n
comment3.params=poi
comment3.target=Point[]\ poiSortieren(Point[])
comment3.text=\ \ \r\n\ Sorting\ the\ Points\ in\ order\ from\ the\ nearest\ one\ to\ the\ furthest\ one\r\n\ The\ Robot\ will\ start\ Up-left\ and\ search\ for\ the\ nearest\ point\ to\ go\ to\r\n
comment4.params=array\ v
comment4.target=boolean\ contains(int[],\ int)
comment4.text=\r\n\ To\ avoid\ recalculate\ the\ same\ index\ again\ \r\n
comment5.params=
comment5.target=void\ createObstacleList()
comment5.text=\ \r\n\ Giving\ the\ User\ the\ opportunity\ to\ choose\ the\ Number\ of\ Obstacles\r\n\ The\ Obstacles\ will\ be\ randomly\ generated\ (Color,\ Position\ ,\ Distance)\ \r\n\ @ArrayList\:\ If\ you\ don't\ know\ how\ many\ items\ are\ going\ to\ be\ held\ in\ your\ array\ then\ use\ ArrayList\r\n\ An\ ArrayList\ is\ a\ dynamic\ data\ structure,\ meaning\ items\ can\ be\ added\ and\ removed\ from\ the\ list\r\n
comment6.params=von\ bis
comment6.target=int\ randomNumber(int,\ int)
comment6.text=\r\n\ randomly\ Numbers\ will\ be\ Generate\r\n
comment7.params=
comment7.target=java.awt.Color\ randomColor()
comment7.text=\r\n\ randomly\ Colors\ will\ be\ Generate,\ \r\n
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Main\ Method,\ with\ it\ can\ the\ User\ a\ solving\ tasks\ writing\ until\ he/she\ Input\ "End".\r\n\ A\ Main\ Method,\ its\ like\ a\ new\ class\ so\ However\ you\ find\ it\ in\ the\ "Spielfeld\ class",\ but\ you\ can't\ call\ the\ methodes\ without\ \r\n\ declaring\ a\ new\ Object\ from\ class\ Speilfeld\r\n
comment9.params=obstacles\ points
comment9.target=void\ draw(java.util.ArrayList,\ Point[])
comment9.text=\r\n\ Drawing\ the\ sign\ area\ with\ the\ obstacles\ and\ the\ Robot\r\n
numComments=12
